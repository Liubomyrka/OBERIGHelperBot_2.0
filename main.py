# main.py

import os
import asyncio
import nest_asyncio
from dotenv import load_dotenv
from telegram import BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeAllGroupChats, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from handlers.start_handler import start, show_main_menu
from handlers.help_handler import help_command
from handlers.schedule_handler import (
    schedule_command,
    set_reminder,
    unset_reminder,
    event_details_callback,
)
from handlers.reminder_handler import schedule_event_reminders
from utils.logger import logger


# üõ°Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
CALENDAR_ID = os.getenv("CALENDAR_ID")


# üõ°Ô∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
async def log_command(command_name: str, success: bool):
    if success:
        logger.info(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command_name}")
    else:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command_name}")


# üõ°Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
    if update.effective_chat.type != "private":
        if update.message:
            await update.message.reply_text(
                "‚ùó –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö. "
                "[–ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç](https://t.me/OBERIGHelperBot).",
                parse_mode="Markdown"
            )
    else:
        await help_command(update, context)
    logger.info("‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–æ—ó –∫–æ–º–∞–Ω–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# üõ°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {context.error}")
    if update and hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π."
        )


# üõ°Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–Ω—å–æ–≥–æ –º–µ–Ω—é
async def text_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"üîÑ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∫–Ω–æ–ø–∫–∏: {text}")

    try:
        if text == "üìÖ –†–æ–∑–∫–ª–∞–¥":
            await schedule_command(update, context)
        elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
            await help_command(update, context)
        elif text == "üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
            await set_reminder(update, context)
        elif text == "üîï –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
            await unset_reminder(update, context)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞: {text}")
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É text_menu_handler: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏.")


# üõ°Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ InlineKeyboard
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        if data == 'rozklad':
            await schedule_command(update, context)
        elif data == 'reminder_on':
            await set_reminder(update, context)
        elif data == 'reminder_off':
            await unset_reminder(update, context)
        elif data == 'help':
            await help_command(update, context)
        elif data.startswith("event_details_"):
            await event_details_callback(update, context)
        else:
            if query.message:
                await query.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç.")
            logger.warning(f"‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç: {data}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É button_handler: {e}")
        if query.message:
            await query.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")


# üõ°Ô∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_bot_commands(application):
    private_commands = [
        BotCommand("start", "üëã –í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"),
        BotCommand("rozklad", "üìÖ –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π"),
        BotCommand("reminder_on", "üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"),
        BotCommand("reminder_off", "üö´ –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"),
        BotCommand("help", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    ]
    group_commands = [BotCommand("start", "üëã –í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")]

    await application.bot.set_my_commands(private_commands, scope=BotCommandScopeAllPrivateChats())
    await application.bot.set_my_commands(group_commands, scope=BotCommandScopeAllGroupChats())
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —ñ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç—ñ–≤.")


# üõ°Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞...")

    application = ApplicationBuilder().token(TOKEN).build()
    await set_bot_commands(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rozklad", schedule_command))
    application.add_handler(CommandHandler("reminder_on", set_reminder))
    application.add_handler(CommandHandler("reminder_off", unset_reminder))
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, text_menu_handler))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)

    schedule_event_reminders(application.job_queue)
    await application.run_polling()


# üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
