# reminder_handler.py

from telegram.ext import JobQueue, ContextTypes
from utils.calendar_utils import get_calendar_events
from utils.logger import logger
from config import REMINDER_CHAT_ID
from datetime import datetime, timedelta, timezone, time
from database import set_value, get_value, delete_value

# üõ°Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
daily_reminder_sent = get_value('daily_reminder_sent') == str(datetime.now(timezone.utc).date())
hourly_reminder_sent = set(get_value('hourly_reminder_sent').split(',')) if get_value('hourly_reminder_sent') else set()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_reminders = {}


# üïí –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —É –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    global daily_reminder_sent
    now = datetime.now(timezone.utc).date()

    if daily_reminder_sent:
        logger.info("üîî –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ.")
        return

    try:
        events = get_calendar_events()
        today_events = [
            event for event in events
            if event["start"].get("dateTime", event["start"].get("date")).startswith(str(now))
        ]

        if not today_events:
            logger.info("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
            return

        message = "üîî *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:*\n\n"
        for event in today_events:
            summary = event.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            start = event["start"].get("dateTime", event["start"].get("date"))

            if 'T' in start:
                event_time = datetime.fromisoformat(start.replace('Z', '+00:00')).astimezone(timezone.utc)
                time_str = event_time.strftime('%H:%M')
            else:
                time_str = "–í–µ—Å—å –¥–µ–Ω—å"

            message += f"üìå *{summary}* –æ {time_str}\n"

        await context.bot.send_message(chat_id=REMINDER_CHAT_ID, text=message, parse_mode="Markdown")
        logger.info("‚úÖ –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        set_value('daily_reminder_sent', str(now))
        daily_reminder_sent = True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")


# ‚è∞ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ —á–∞—Ç–∏
async def send_event_reminders(context: ContextTypes.DEFAULT_TYPE):
    global hourly_reminder_sent
    try:
        events = get_calendar_events()
        now = datetime.now(timezone.utc)
        one_hour_later = now + timedelta(hours=1)

        for event in events:
            start = event["start"].get("dateTime", event["start"].get("date"))
            event_id = event.get("id", "")

            if event_id in hourly_reminder_sent:
                continue  # –£–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

            if 'T' in start:
                event_time = datetime.fromisoformat(start.replace('Z', '+00:00')).astimezone(timezone.utc)
            else:
                event_time = datetime.strptime(start, '%Y-%m-%d').replace(tzinfo=timezone.utc)

            if now <= event_time <= one_hour_later:
                for user_id in user_reminders.keys():
                    if get_value(f'reminder_{user_id}') == 'on':
                        message = (
                            f"‚è∞ *–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—é:*\n\n"
                            f"üìÖ {event_time.strftime('%d-%m-%Y')} ‚Äî *{event['summary']}*\n"
                            f"üïí –ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {event_time.strftime('%H:%M')}"
                        )
                        await context.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")
                        logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–æ–¥—ñ—é: {event['summary']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

                hourly_reminder_sent.add(event_id)
                set_value('hourly_reminder_sent', ','.join(hourly_reminder_sent))
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ—É–Ω–∫—Ü—ñ—ó –≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")


# üîî –í–º–∏–∫–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def set_reminder(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    set_value(f'reminder_{user_id}', 'on')
    delete_value(f'hourly_reminder_{user_id}')
    logger.info(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    await update.message.reply_text("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")


# üîï –í–∏–º–∫–Ω–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def unset_reminder(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    set_value(f'reminder_{user_id}', 'off')
    delete_value(f'hourly_reminder_{user_id}')
    logger.info(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    await update.message.reply_text("üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")


# üõ°Ô∏è –°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def reset_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    delete_value('daily_reminder_sent')
    delete_value('hourly_reminder_sent')
    hourly_reminder_sent.clear()
    logger.info("üîÑ –ü—Ä–∞–ø–æ—Ä—Ü—ñ —â–æ–¥–µ–Ω–Ω–∏—Ö —ñ –≥–æ–¥–∏–Ω–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —Å–∫–∏–Ω—É—Ç–æ.")


# üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
def schedule_event_reminders(job_queue: JobQueue):
    job_queue.run_daily(send_daily_reminder, time=time(hour=9, minute=0, tzinfo=timezone.utc))
    job_queue.run_repeating(send_event_reminders, interval=900, first=10)
    job_queue.run_daily(reset_daily_reminder, time=time(hour=0, minute=0, tzinfo=timezone.utc))

