# schedule_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.calendar_utils import get_calendar_events
from datetime import datetime, timezone, timedelta
from utils.logger import logger
import pytz  # –î–ª—è –æ–±—Ä–æ–±–∫–∏ —á–∞—Å–æ–≤–∏—Ö –ø–æ—è—Å—ñ–≤

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
user_reminders = {}
notified_events = set()


# üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É
async def ensure_private_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ.
    """
    if update.effective_chat.type != "private":
        try:
            logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /{command} –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.")
            await update.message.reply_text(
                f"‚ùó *–ö–æ–º–∞–Ω–¥–∞ /{command} –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.*\n"
                f"üëâ [–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É](https://t.me/OBERIGHelperBot).",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É ensure_private_chat: {e}")
        return False
    return True


# üõ°Ô∏è –§—É–Ω–∫—Ü—ñ—è schedule_command
async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π –∑ Google Calendar.
    """
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: /rozklad")
    if not await ensure_private_chat(update, context, "rozklad"):
        return

    try:
        events = get_calendar_events()
        if not events:
            await update.message.reply_text("üìÖ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
            logger.info("‚ö†Ô∏è –ü–æ–¥—ñ—ó –≤ Google Calendar –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        else:
            response = "üìÖ **–†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π:**\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            buttons = []

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ë–µ—Ä–ª—ñ–Ω—É
            berlin_tz = pytz.timezone('Europe/Berlin')

            emoji_numbers = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]

            for index, event in enumerate(events[:5]):
                event_id = event.get("id", "")
                summary = event.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                start = event["start"].get("dateTime", event["start"].get("date"))

                try:
                    if 'T' in start:
                        # –ß–∞—Å —É UTC -> –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å
                        event_dt = datetime.fromisoformat(start.replace('Z', '+00:00')).astimezone(berlin_tz)
                    else:
                        # –ü–æ–¥—ñ—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                        event_dt = datetime.strptime(start, '%Y-%m-%d').replace(tzinfo=timezone.utc).astimezone(berlin_tz)

                    start_date = event_dt.strftime('%d-%m-%Y')
                    start_time = event_dt.strftime('%H:%M') if 'T' in start else "–í–µ—Å—å –¥–µ–Ω—å"

                    response += (
                        f"{emoji_numbers[index]} *{summary}*\n"
                        f"üìÖ {start_date} ‚è∞ {start_time}\n"
                        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    )
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ÑπÔ∏è {emoji_numbers[index]} {summary}",
                            callback_data=f"event_details_{event_id[:20]}"
                        )
                    ])
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–¥—ñ—ó: {e}")

            await update.message.reply_text(
                text=response,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /rozklad –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –∫–æ–º–∞–Ω–¥—ñ /rozklad: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ–π.")


# üõ°Ô∏è –§—É–Ω–∫—Ü—ñ—è event_details_callback
async def event_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –≤–∏–±—Ä–∞–Ω–æ—ó –ø–æ–¥—ñ—ó.
    """
    logger.info("üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ callback")
    query = update.callback_query
    await query.answer()

    try:
        event_id = query.data.replace("event_details_", "")
        events = get_calendar_events()
        event = next((e for e in events if e.get("id", "").startswith(event_id)), None)

        if event:
            description = event.get("description", "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
            start = event["start"].get("dateTime", event["start"].get("date"))

            berlin_tz = pytz.timezone('Europe/Berlin')

            if 'T' in start:
                event_dt = datetime.fromisoformat(start.replace('Z', '+00:00')).astimezone(berlin_tz)
            else:
                event_dt = datetime.strptime(start, '%Y-%m-%d').replace(tzinfo=timezone.utc).astimezone(berlin_tz)

            start_date = event_dt.strftime('%d-%m-%Y')
            start_time = event_dt.strftime('%H:%M') if 'T' in start else "–í–µ—Å—å –¥–µ–Ω—å"

            response = (
                f"üìÖ **–î–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó:**\n"
                f"üìå **–ù–∞–∑–≤–∞:** {event['summary']}\n"
                f"üìÖ **–î–∞—Ç–∞:** {start_date}\n"
                f"‚è∞ **–ß–∞—Å:** {start_time}\n"
                f"üìù **–û–ø–∏—Å:** {description}"
            )
            await query.message.reply_text(text=response, parse_mode="Markdown")
            logger.info("‚úÖ –î–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            await query.message.reply_text("‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            logger.warning("‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É callback: {e}")
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


# üîî –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_private_chat(update, context, "reminder_on"):
        return
    user_reminders[update.effective_chat.id] = True
    await update.message.reply_text("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")


# üîï –í–∏–º–∫–Ω–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def unset_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_private_chat(update, context, "reminder_off"):
        return
    user_reminders.pop(update.effective_chat.id, None)
    await update.message.reply_text("üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
